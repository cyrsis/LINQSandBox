#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CommodityManagement.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CommodityManagement")]
	public partial class CommodityManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRunningAccount(RunningAccount instance);
    partial void UpdateRunningAccount(RunningAccount instance);
    partial void DeleteRunningAccount(RunningAccount instance);
    partial void InsertCommodityList(CommodityList instance);
    partial void UpdateCommodityList(CommodityList instance);
    partial void DeleteCommodityList(CommodityList instance);
    #endregion
		
		public CommodityManagementDataContext() : 
				base(global::CommodityManagement.Model.Properties.Settings.Default.CommodityManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CommodityManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CommodityManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CommodityManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CommodityManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RunningAccount> RunningAccount
		{
			get
			{
				return this.GetTable<RunningAccount>();
			}
		}
		
		public System.Data.Linq.Table<CommodityList> CommodityList
		{
			get
			{
				return this.GetTable<CommodityList>();
			}
		}
	}
	
	[Table(Name="dbo.RunningAccount")]
	[DataContract()]
	public partial class RunningAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ra_id;
		
		private string _ra_barcode;
		
		private long _ra_amount;
		
		private double _ra_price;
		
		private System.DateTime _ra_indate;
		
		private long _ra_clid;
		
		private string _Name;
		
		private EntityRef<CommodityList> _CommodityList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnBarcodeChanging(string value);
    partial void OnBarcodeChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCommodityListIdChanging(long value);
    partial void OnCommodityListIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RunningAccount()
		{
			this.Initialize();
		}
		
		[Column(Name="ra_id", Storage="_ra_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public long Id
		{
			get
			{
				return this._ra_id;
			}
			set
			{
				if ((this._ra_id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._ra_id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="ra_barcode", Storage="_ra_barcode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Barcode
		{
			get
			{
				return this._ra_barcode;
			}
			set
			{
				if ((this._ra_barcode != value))
				{
					this.OnBarcodeChanging(value);
					this.SendPropertyChanging();
					this._ra_barcode = value;
					this.SendPropertyChanged("Barcode");
					this.OnBarcodeChanged();
				}
			}
		}
		
		[Column(Name="ra_amount", Storage="_ra_amount", DbType="BigInt NOT NULL")]
		[DataMember(Order=3)]
		public long Amount
		{
			get
			{
				return this._ra_amount;
			}
			set
			{
				if ((this._ra_amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._ra_amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Name="ra_price", Storage="_ra_price", DbType="Decimal(18,4) NOT NULL")]
		[DataMember(Order=4)]
		public double Price
		{
			get
			{
				return this._ra_price;
			}
			set
			{
				if ((this._ra_price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._ra_price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Name="ra_indate", Storage="_ra_indate", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime Date
		{
			get
			{
				return this._ra_indate;
			}
			set
			{
				if ((this._ra_indate != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._ra_indate = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Name="ra_clid", Storage="_ra_clid", DbType="BigInt NOT NULL")]
		[DataMember(Order=6)]
		public long CommodityListId
		{
			get
			{
				return this._ra_clid;
			}
			set
			{
				if ((this._ra_clid != value))
				{
					this.OnCommodityListIdChanging(value);
					this.SendPropertyChanging();
					this._ra_clid = value;
					this.SendPropertyChanged("CommodityListId");
					this.OnCommodityListIdChanged();
				}
			}
		}
		
		[Column(Name="ra_name", Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=7)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="CommodityList_RunningAccount", Storage="_CommodityList", ThisKey="CommodityListId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal CommodityList CommodityList
		{
			get
			{
				return this._CommodityList.Entity;
			}
			set
			{
				CommodityList previousValue = this._CommodityList.Entity;
				if (((previousValue != value) 
							|| (this._CommodityList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommodityList.Entity = null;
						previousValue.RunningAccount.Remove(this);
					}
					this._CommodityList.Entity = value;
					if ((value != null))
					{
						value.RunningAccount.Add(this);
						this._ra_clid = value.Id;
					}
					else
					{
						this._ra_clid = default(long);
					}
					this.SendPropertyChanged("CommodityList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._CommodityList = default(EntityRef<CommodityList>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.CommodityList")]
	[DataContract()]
	public partial class CommodityList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _cl_id;
		
		private string _cl_name;
		
		private long _cl_amount;
		
		private double _cl_price;
		
		private string _cl_unit;
		
		private System.DateTime _cl_indate;
		
		private string _cl_barcode;
		
		private double _cl_iprice;
		
		private EntitySet<RunningAccount> _RunningAccount;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnBarcodeChanging(string value);
    partial void OnBarcodeChanged();
    partial void OnImportPriceChanging(double value);
    partial void OnImportPriceChanged();
    #endregion
		
		public CommodityList()
		{
			this.Initialize();
		}
		
		[Column(Name="cl_id", Storage="_cl_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public long Id
		{
			get
			{
				return this._cl_id;
			}
			set
			{
				if ((this._cl_id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._cl_id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="cl_name", Storage="_cl_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._cl_name;
			}
			set
			{
				if ((this._cl_name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._cl_name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="cl_amount", Storage="_cl_amount", DbType="BigInt NOT NULL")]
		[DataMember(Order=3)]
		public long Amount
		{
			get
			{
				return this._cl_amount;
			}
			set
			{
				if ((this._cl_amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._cl_amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Name="cl_price", Storage="_cl_price", DbType="Decimal(18,4) NOT NULL")]
		[DataMember(Order=4)]
		public double Price
		{
			get
			{
				return this._cl_price;
			}
			set
			{
				if ((this._cl_price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._cl_price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Name="cl_unit", Storage="_cl_unit", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string Unit
		{
			get
			{
				return this._cl_unit;
			}
			set
			{
				if ((this._cl_unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._cl_unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Name="cl_indate", Storage="_cl_indate", DbType="DateTime NOT NULL")]
		[DataMember(Order=6)]
		public System.DateTime Date
		{
			get
			{
				return this._cl_indate;
			}
			set
			{
				if ((this._cl_indate != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._cl_indate = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Name="cl_barcode", Storage="_cl_barcode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=7)]
		public string Barcode
		{
			get
			{
				return this._cl_barcode;
			}
			set
			{
				if ((this._cl_barcode != value))
				{
					this.OnBarcodeChanging(value);
					this.SendPropertyChanging();
					this._cl_barcode = value;
					this.SendPropertyChanged("Barcode");
					this.OnBarcodeChanged();
				}
			}
		}
		
		[Column(Name="cl_iprice", Storage="_cl_iprice", DbType="Decimal(18,4) NOT NULL")]
		[DataMember(Order=8)]
		public double ImportPrice
		{
			get
			{
				return this._cl_iprice;
			}
			set
			{
				if ((this._cl_iprice != value))
				{
					this.OnImportPriceChanging(value);
					this.SendPropertyChanging();
					this._cl_iprice = value;
					this.SendPropertyChanged("ImportPrice");
					this.OnImportPriceChanged();
				}
			}
		}
		
		[Association(Name="CommodityList_RunningAccount", Storage="_RunningAccount", ThisKey="Id", OtherKey="CommodityListId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<RunningAccount> RunningAccount
		{
			get
			{
				if ((this.serializing 
							&& (this._RunningAccount.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._RunningAccount;
			}
			set
			{
				this._RunningAccount.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RunningAccount(RunningAccount entity)
		{
			this.SendPropertyChanging();
			entity.CommodityList = this;
		}
		
		private void detach_RunningAccount(RunningAccount entity)
		{
			this.SendPropertyChanging();
			entity.CommodityList = null;
		}
		
		private void Initialize()
		{
			this._RunningAccount = new EntitySet<RunningAccount>(new Action<RunningAccount>(this.attach_RunningAccount), new Action<RunningAccount>(this.detach_RunningAccount));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
